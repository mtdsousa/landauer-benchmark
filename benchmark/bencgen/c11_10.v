module CRippleCarryAdder_10_10_10_InOutT(pA9,pA8,pA7,pA6,pA5,pA4,pA3,pA2,pA1,pA0, pB9,pB8,pB7,pB6,pB5,pB4,pB3,pB2,pB1,pB0, r9,r8,r7,r6,r5,r4,r3,r2,r1,r0, cIn, cOut);

input pA9,pA8,pA7,pA6,pA5,pA4,pA3,pA2,pA1,pA0, pB9,pB8,pB7,pB6,pB5,pB4,pB3,pB2,pB1,pB0, cIn;
output r9,r8,r7,r6,r5,r4,r3,r2,r1,r0, cOut;
wire w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63, w64, w65, w66, w67, w68, w69, w70, w71, w72;

assign w1 = pA9;
assign w2 = pA8;
assign w3 = pA7;
assign w4 = pA6;
assign w5 = pA5;
assign w6 = pA4;
assign w7 = pA3;
assign w8 = pA2;
assign w9 = pA1;
assign w10 = pA0;
assign w11 = pB9;
assign w12 = pB8;
assign w13 = pB7;
assign w14 = pB6;
assign w15 = pB5;
assign w16 = pB4;
assign w17 = pB3;
assign w18 = pB2;
assign w19 = pB1;
assign w20 = pB0;
assign r9 = w21;
assign r8 = w22;
assign r7 = w23;
assign r6 = w24;
assign r5 = w25;
assign r4 = w26;
assign r3 = w27;
assign r2 = w28;
assign r1 = w29;
assign r0 = w30;
assign w32 = cIn;
assign cOut = w31;

assign w35 = w1 ^ w11;
assign w21 = w35 ^ w32;
assign w36 = w32 & w35;
assign w37 = w11 & w1;
assign w34 = w36 | w37;
assign w39 = w2 ^ w12;
assign w22 = w39 ^ w34;
assign w40 = w34 & w39;
assign w41 = w12 & w2;
assign w38 = w40 | w41;
assign w43 = w3 ^ w13;
assign w23 = w43 ^ w38;
assign w44 = w38 & w43;
assign w45 = w13 & w3;
assign w42 = w44 | w45;
assign w47 = w4 ^ w14;
assign w24 = w47 ^ w42;
assign w48 = w42 & w47;
assign w49 = w14 & w4;
assign w46 = w48 | w49;
assign w51 = w5 ^ w15;
assign w25 = w51 ^ w46;
assign w52 = w46 & w51;
assign w53 = w15 & w5;
assign w50 = w52 | w53;
assign w55 = w6 ^ w16;
assign w26 = w55 ^ w50;
assign w56 = w50 & w55;
assign w57 = w16 & w6;
assign w54 = w56 | w57;
assign w59 = w7 ^ w17;
assign w27 = w59 ^ w54;
assign w60 = w54 & w59;
assign w61 = w17 & w7;
assign w58 = w60 | w61;
assign w63 = w8 ^ w18;
assign w28 = w63 ^ w58;
assign w64 = w58 & w63;
assign w65 = w18 & w8;
assign w62 = w64 | w65;
assign w67 = w9 ^ w19;
assign w29 = w67 ^ w62;
assign w68 = w62 & w67;
assign w69 = w19 & w9;
assign w66 = w68 | w69;
assign w70 = w10 ^ w20;
assign w30 = w70 ^ w66;
assign w71 = w66 & w70;
assign w72 = w20 & w10;
assign w31 = w71 | w72;

endmodule

